package com.mrcrayfish.furniture.core;

import com.mrcrayfish.furniture.FurnitureMod;
import com.mrcrayfish.furniture.Reference;
import com.mrcrayfish.furniture.block.*;
import com.mrcrayfish.furniture.item.BlockSupplierItem;
import com.mrcrayfish.furniture.item.DoorMatItem;
import com.mrcrayfish.furniture.item.TrampolineItem;
import net.minecraft.world.item.BlockItem;
import net.minecraft.world.item.Item;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.SoundType;
import net.minecraft.world.level.block.state.properties.NoteBlockInstrument;
import net.minecraft.world.level.material.MapColor;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.RegistryObject;

import javax.annotation.Nullable;
import java.util.function.Function;
import java.util.function.Supplier;

/**
 * Author: MrCrayfish
 */
public class ModBlocks
{
    public static final DeferredRegister<Block> REGISTER = DeferredRegister.create(ForgeRegistries.BLOCKS, Reference.MOD_ID);

    public static final RegistryObject<Block> TABLE_OAK = register("oak_table", () -> new TableBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> TABLE_SPRUCE = register("spruce_table", () -> new TableBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> TABLE_BIRCH = register("birch_table", () -> new TableBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> TABLE_JUNGLE = register("jungle_table", () -> new TableBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> TABLE_ACACIA = register("acacia_table", () -> new TableBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> TABLE_DARK_OAK = register("dark_oak_table", () -> new TableBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> TABLE_CRIMSON = register("crimson_table", () -> new TableBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> TABLE_WARPED = register("warped_table", () -> new TableBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> TABLE_MANGROVE = register("mangrove_table", () -> new TableBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> TABLE_CHERRY = register("cherry_table", () -> new TableBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> TABLE_BAMBOO = register("bamboo_table", () -> new TableBlock(Block.Properties.copy(Blocks.BAMBOO_PLANKS)));
    public static final RegistryObject<Block> TABLE_STRIPPED_OAK = register("stripped_oak_table", () -> new TableBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> TABLE_STRIPPED_SPRUCE = register("stripped_spruce_table", () -> new TableBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> TABLE_STRIPPED_BIRCH = register("stripped_birch_table", () -> new TableBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> TABLE_STRIPPED_JUNGLE = register("stripped_jungle_table", () -> new TableBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> TABLE_STRIPPED_ACACIA = register("stripped_acacia_table", () -> new TableBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> TABLE_STRIPPED_DARK_OAK = register("stripped_dark_oak_table", () -> new TableBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> TABLE_STRIPPED_CRIMSON = register("stripped_crimson_table", () -> new TableBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> TABLE_STRIPPED_WARPED = register("stripped_warped_table", () -> new TableBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> TABLE_STRIPPED_MANGROVE = register("stripped_mangrove_table", () -> new TableBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> TABLE_STRIPPED_CHERRY = register("stripped_cherry_table", () -> new TableBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> CHAIR_OAK = register("oak_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> CHAIR_SPRUCE = register("spruce_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> CHAIR_BIRCH = register("birch_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> CHAIR_JUNGLE = register("jungle_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> CHAIR_ACACIA = register("acacia_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> CHAIR_DARK_OAK = register("dark_oak_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> CHAIR_CRIMSON = register("crimson_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> CHAIR_WARPED = register("warped_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> CHAIR_MANGROVE = register("mangrove_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> CHAIR_CHERRY = register("cherry_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> CHAIR_BAMBOO = register("bamboo_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.BAMBOO_PLANKS)));
    public static final RegistryObject<Block> CHAIR_STRIPPED_OAK = register("stripped_oak_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> CHAIR_STRIPPED_SPRUCE = register("stripped_spruce_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> CHAIR_STRIPPED_BIRCH = register("stripped_birch_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> CHAIR_STRIPPED_JUNGLE = register("stripped_jungle_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> CHAIR_STRIPPED_ACACIA = register("stripped_acacia_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> CHAIR_STRIPPED_DARK_OAK = register("stripped_dark_oak_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> CHAIR_STRIPPED_CRIMSON = register("stripped_crimson_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> CHAIR_STRIPPED_WARPED = register("stripped_warped_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> CHAIR_STRIPPED_MANGROVE = register("stripped_mangrove_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> CHAIR_STRIPPED_CHERRY = register("stripped_cherry_chair", () -> new ChairBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_OAK = register("oak_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_SPRUCE = register("spruce_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_BIRCH = register("birch_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_JUNGLE = register("jungle_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_ACACIA = register("acacia_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_DARK_OAK = register("dark_oak_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_CRIMSON = register("crimson_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_WARPED = register("warped_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_MANGROVE = register("mangrove_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_CHERRY = register("cherry_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_BAMBOO = register("bamboo_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.BAMBOO_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_STRIPPED_OAK = register("stripped_oak_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_STRIPPED_SPRUCE = register("stripped_spruce_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_STRIPPED_BIRCH = register("stripped_birch_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_STRIPPED_JUNGLE = register("stripped_jungle_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_STRIPPED_ACACIA = register("stripped_acacia_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_STRIPPED_DARK_OAK = register("stripped_dark_oak_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_STRIPPED_CRIMSON = register("stripped_crimson_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_STRIPPED_WARPED = register("stripped_warped_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_STRIPPED_MANGROVE = register("stripped_mangrove_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> COFFEE_TABLE_STRIPPED_CHERRY = register("stripped_cherry_coffee_table", () -> new CoffeeTableBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> CABINET_OAK = register("oak_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> CABINET_SPRUCE = register("spruce_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> CABINET_BIRCH = register("birch_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> CABINET_JUNGLE = register("jungle_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> CABINET_ACACIA = register("acacia_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> CABINET_DARK_OAK = register("dark_oak_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> CABINET_CRIMSON = register("crimson_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> CABINET_WARPED = register("warped_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> CABINET_MANGROVE = register("mangrove_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> CABINET_CHERRY = register("cherry_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> CABINET_BAMBOO = register("bamboo_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.BAMBOO_PLANKS)));
    public static final RegistryObject<Block> CABINET_STRIPPED_OAK = register("stripped_oak_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> CABINET_STRIPPED_SPRUCE = register("stripped_spruce_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> CABINET_STRIPPED_BIRCH = register("stripped_birch_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> CABINET_STRIPPED_JUNGLE = register("stripped_jungle_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> CABINET_STRIPPED_ACACIA = register("stripped_acacia_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> CABINET_STRIPPED_DARK_OAK = register("stripped_dark_oak_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> CABINET_STRIPPED_CRIMSON = register("stripped_crimson_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> CABINET_STRIPPED_WARPED = register("stripped_warped_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> CABINET_STRIPPED_MANGROVE = register("stripped_mangrove_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> CABINET_STRIPPED_CHERRY = register("stripped_cherry_cabinet", () -> new CabinetBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_OAK = register("oak_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_SPRUCE = register("spruce_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_BIRCH = register("birch_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_JUNGLE = register("jungle_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_ACACIA = register("acacia_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_DARK_OAK = register("dark_oak_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_CRIMSON = register("crimson_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_WARPED = register("warped_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_MANGROVE = register("mangrove_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_CHERRY = register("cherry_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_BAMBOO = register("bamboo_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.BAMBOO_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_STRIPPED_OAK = register("stripped_oak_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_STRIPPED_SPRUCE = register("stripped_spruce_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_STRIPPED_BIRCH = register("stripped_birch_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_STRIPPED_JUNGLE = register("stripped_jungle_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_STRIPPED_ACACIA = register("stripped_acacia_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_STRIPPED_DARK_OAK = register("stripped_dark_oak_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_STRIPPED_CRIMSON = register("stripped_crimson_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_STRIPPED_WARPED = register("stripped_warped_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_STRIPPED_MANGROVE = register("stripped_mangrove_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> BEDSIDE_CABINET_STRIPPED_CHERRY = register("stripped_cherry_bedside_cabinet", () -> new BedsideCabinetBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> DESK_OAK = register("oak_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.OAK_PLANKS), DeskBlock.MaterialType.OAK));
    public static final RegistryObject<Block> DESK_SPRUCE = register("spruce_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS), DeskBlock.MaterialType.BIRCH));
    public static final RegistryObject<Block> DESK_BIRCH = register("birch_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS), DeskBlock.MaterialType.SPRUCE));
    public static final RegistryObject<Block> DESK_JUNGLE = register("jungle_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS), DeskBlock.MaterialType.JUNGLE));
    public static final RegistryObject<Block> DESK_ACACIA = register("acacia_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS), DeskBlock.MaterialType.ACACIA));
    public static final RegistryObject<Block> DESK_DARK_OAK = register("dark_oak_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS), DeskBlock.MaterialType.DARK_OAK));
    public static final RegistryObject<Block> DESK_CRIMSON = register("crimson_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS), DeskBlock.MaterialType.CRIMSON));
    public static final RegistryObject<Block> DESK_WARPED = register("warped_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.WARPED_PLANKS), DeskBlock.MaterialType.WARPED));
    public static final RegistryObject<Block> DESK_MANGROVE = register("mangrove_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS), DeskBlock.MaterialType.MANGROVE));
    public static final RegistryObject<Block> DESK_CHERRY = register("cherry_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS), DeskBlock.MaterialType.CHERRY));
    public static final RegistryObject<Block> DESK_BAMBOO = register("bamboo_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.BAMBOO_PLANKS), DeskBlock.MaterialType.BAMBOO));
    public static final RegistryObject<Block> DESK_STRIPPED_OAK = register("stripped_oak_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.OAK_PLANKS), DeskBlock.MaterialType.STRIPPED_OAK));
    public static final RegistryObject<Block> DESK_STRIPPED_SPRUCE = register("stripped_spruce_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS), DeskBlock.MaterialType.STRIPPED_BIRCH));
    public static final RegistryObject<Block> DESK_STRIPPED_BIRCH = register("stripped_birch_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS), DeskBlock.MaterialType.STRIPPED_SPRUCE));
    public static final RegistryObject<Block> DESK_STRIPPED_JUNGLE = register("stripped_jungle_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS), DeskBlock.MaterialType.STRIPPED_JUNGLE));
    public static final RegistryObject<Block> DESK_STRIPPED_ACACIA = register("stripped_acacia_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS), DeskBlock.MaterialType.STRIPPED_ACACIA));
    public static final RegistryObject<Block> DESK_STRIPPED_DARK_OAK = register("stripped_dark_oak_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS), DeskBlock.MaterialType.STRIPPED_DARK_OAK));
    public static final RegistryObject<Block> DESK_STRIPPED_CRIMSON = register("stripped_crimson_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS), DeskBlock.MaterialType.STRIPPED_CRIMSON));
    public static final RegistryObject<Block> DESK_STRIPPED_WARPED = register("stripped_warped_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.WARPED_PLANKS), DeskBlock.MaterialType.STRIPPED_WARPED));
    public static final RegistryObject<Block> DESK_STRIPPED_MANGROVE = register("stripped_mangrove_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS), DeskBlock.MaterialType.STRIPPED_MANGROVE));
    public static final RegistryObject<Block> DESK_STRIPPED_CHERRY = register("stripped_cherry_desk", () -> new DeskBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS), DeskBlock.MaterialType.STRIPPED_CHERRY));
    public static final RegistryObject<Block> DESK_CABINET_OAK = register("oak_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.OAK_PLANKS), DeskBlock.MaterialType.OAK));
    public static final RegistryObject<Block> DESK_CABINET_SPRUCE = register("spruce_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS), DeskBlock.MaterialType.BIRCH));
    public static final RegistryObject<Block> DESK_CABINET_BIRCH = register("birch_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS), DeskBlock.MaterialType.SPRUCE));
    public static final RegistryObject<Block> DESK_CABINET_JUNGLE = register("jungle_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS), DeskBlock.MaterialType.JUNGLE));
    public static final RegistryObject<Block> DESK_CABINET_ACACIA = register("acacia_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS), DeskBlock.MaterialType.ACACIA));
    public static final RegistryObject<Block> DESK_CABINET_DARK_OAK = register("dark_oak_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS), DeskBlock.MaterialType.DARK_OAK));
    public static final RegistryObject<Block> DESK_CABINET_CRIMSON = register("crimson_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS), DeskBlock.MaterialType.CRIMSON));
    public static final RegistryObject<Block> DESK_CABINET_WARPED = register("warped_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.WARPED_PLANKS), DeskBlock.MaterialType.WARPED));
    public static final RegistryObject<Block> DESK_CABINET_MANGROVE = register("mangrove_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS), DeskBlock.MaterialType.MANGROVE));
    public static final RegistryObject<Block> DESK_CABINET_CHERRY = register("cherry_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS), DeskBlock.MaterialType.CHERRY));
    public static final RegistryObject<Block> DESK_CABINET_BAMBOO = register("bamboo_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.BAMBOO_PLANKS), DeskBlock.MaterialType.BAMBOO));
    public static final RegistryObject<Block> DESK_CABINET_STRIPPED_OAK = register("stripped_oak_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.OAK_PLANKS), DeskBlock.MaterialType.STRIPPED_OAK));
    public static final RegistryObject<Block> DESK_CABINET_STRIPPED_SPRUCE = register("stripped_spruce_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS), DeskBlock.MaterialType.STRIPPED_BIRCH));
    public static final RegistryObject<Block> DESK_CABINET_STRIPPED_BIRCH = register("stripped_birch_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS), DeskBlock.MaterialType.STRIPPED_SPRUCE));
    public static final RegistryObject<Block> DESK_CABINET_STRIPPED_JUNGLE = register("stripped_jungle_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS), DeskBlock.MaterialType.STRIPPED_JUNGLE));
    public static final RegistryObject<Block> DESK_CABINET_STRIPPED_ACACIA = register("stripped_acacia_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS), DeskBlock.MaterialType.STRIPPED_ACACIA));
    public static final RegistryObject<Block> DESK_CABINET_STRIPPED_DARK_OAK = register("stripped_dark_oak_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS), DeskBlock.MaterialType.STRIPPED_DARK_OAK));
    public static final RegistryObject<Block> DESK_CABINET_STRIPPED_CRIMSON = register("stripped_crimson_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS), DeskBlock.MaterialType.STRIPPED_CRIMSON));
    public static final RegistryObject<Block> DESK_CABINET_STRIPPED_WARPED = register("stripped_warped_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.WARPED_PLANKS), DeskBlock.MaterialType.STRIPPED_WARPED));
    public static final RegistryObject<Block> DESK_CABINET_STRIPPED_MANGROVE = register("stripped_mangrove_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS), DeskBlock.MaterialType.STRIPPED_MANGROVE));
    public static final RegistryObject<Block> DESK_CABINET_STRIPPED_CHERRY = register("stripped_cherry_desk_cabinet", () -> new DeskCabinetBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS), DeskBlock.MaterialType.STRIPPED_CHERRY));
    public static final RegistryObject<Block> SOFA_WHITE = register("white_sofa", () -> new SofaBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> SOFA_ORANGE = register("orange_sofa", () -> new SofaBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> SOFA_MAGENTA = register("magenta_sofa", () -> new SofaBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> SOFA_LIGHT_BLUE = register("light_blue_sofa", () -> new SofaBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> SOFA_YELLOW = register("yellow_sofa", () -> new SofaBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> SOFA_LIME = register("lime_sofa", () -> new SofaBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> SOFA_PINK = register("pink_sofa", () -> new SofaBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> SOFA_GRAY = register("gray_sofa", () -> new SofaBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> SOFA_LIGHT_GRAY = register("light_gray_sofa", () -> new SofaBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> SOFA_CYAN = register("cyan_sofa", () -> new SofaBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> SOFA_PURPLE = register("purple_sofa", () -> new SofaBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> SOFA_BLUE = register("blue_sofa", () -> new SofaBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> SOFA_BROWN = register("brown_sofa", () -> new SofaBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> SOFA_GREEN = register("green_sofa", () -> new SofaBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> SOFA_RED = register("red_sofa", () -> new SofaBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> SOFA_BLACK = register("black_sofa", () -> new SofaBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> SOFA_RAINBOW = register("rainbow_sofa", () -> new SofaBlock(Block.Properties.copy(Blocks.OAK_PLANKS)), new Item.Properties());
    public static final RegistryObject<Block> BLINDS_OAK = register("oak_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> BLINDS_SPRUCE = register("spruce_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> BLINDS_BIRCH = register("birch_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> BLINDS_JUNGLE = register("jungle_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> BLINDS_ACACIA = register("acacia_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> BLINDS_DARK_OAK = register("dark_oak_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> BLINDS_CRIMSON = register("crimson_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> BLINDS_WARPED = register("warped_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> BLINDS_MANGROVE = register("mangrove_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> BLINDS_CHERRY = register("cherry_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> BLINDS_BAMBOO = register("bamboo_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.BAMBOO_PLANKS)));
    public static final RegistryObject<Block> BLINDS_STRIPPED_OAK = register("stripped_oak_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> BLINDS_STRIPPED_SPRUCE = register("stripped_spruce_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> BLINDS_STRIPPED_BIRCH = register("stripped_birch_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> BLINDS_STRIPPED_JUNGLE = register("stripped_jungle_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> BLINDS_STRIPPED_ACACIA = register("stripped_acacia_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> BLINDS_STRIPPED_DARK_OAK = register("stripped_dark_oak_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> BLINDS_STRIPPED_CRIMSON = register("stripped_crimson_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> BLINDS_STRIPPED_WARPED = register("stripped_warped_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> BLINDS_STRIPPED_MANGROVE = register("stripped_mangrove_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> BLINDS_STRIPPED_CHERRY = register("stripped_cherry_blinds", () -> new BlindsBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_OAK = register("oak_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_SPRUCE = register("spruce_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_BIRCH = register("birch_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_JUNGLE = register("jungle_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_ACACIA = register("acacia_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_DARK_OAK = register("dark_oak_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_CRIMSON = register("crimson_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_WARPED = register("warped_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_MANGROVE = register("mangrove_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_CHERRY = register("cherry_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_BAMBOO = register("bamboo_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.BAMBOO_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_STRIPPED_OAK = register("stripped_oak_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_STRIPPED_SPRUCE = register("stripped_spruce_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_STRIPPED_BIRCH = register("stripped_birch_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_STRIPPED_JUNGLE = register("stripped_jungle_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_STRIPPED_ACACIA = register("stripped_acacia_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_STRIPPED_DARK_OAK = register("stripped_dark_oak_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_STRIPPED_CRIMSON = register("stripped_crimson_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_STRIPPED_WARPED = register("stripped_warped_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_STRIPPED_MANGROVE = register("stripped_mangrove_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_FENCE_STRIPPED_CHERRY = register("stripped_cherry_upgraded_fence", () -> new UpgradedFenceBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_OAK = register("oak_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_SPRUCE = register("spruce_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_BIRCH = register("birch_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_JUNGLE = register("jungle_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_ACACIA = register("acacia_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_DARK_OAK = register("dark_oak_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_CRIMSON = register("crimson_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_WARPED = register("warped_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_MANGROVE = register("mangrove_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_CHERRY = register("cherry_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_BAMBOO = register("bamboo_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.BAMBOO_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_STRIPPED_OAK = register("stripped_oak_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_STRIPPED_SPRUCE = register("stripped_spruce_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_STRIPPED_BIRCH = register("stripped_birch_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_STRIPPED_JUNGLE = register("stripped_jungle_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_STRIPPED_ACACIA = register("stripped_acacia_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_STRIPPED_DARK_OAK = register("stripped_dark_oak_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_STRIPPED_CRIMSON = register("stripped_crimson_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_STRIPPED_WARPED = register("stripped_warped_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_STRIPPED_MANGROVE = register("stripped_mangrove_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> UPGRADED_GATE_STRIPPED_CHERRY = register("stripped_cherry_upgraded_gate", () -> new UpgradedGateBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> PICKET_FENCE_WHITE = register("white_picket_fence", () -> new UpgradedFenceBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.SNOW)));
    public static final RegistryObject<Block> PICKET_FENCE_ORANGE = register("orange_picket_fence", () -> new UpgradedFenceBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_ORANGE)));
    public static final RegistryObject<Block> PICKET_FENCE_MAGENTA = register("magenta_picket_fence", () -> new UpgradedFenceBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_MAGENTA)));
    public static final RegistryObject<Block> PICKET_FENCE_LIGHT_BLUE = register("light_blue_picket_fence", () -> new UpgradedFenceBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_LIGHT_BLUE)));
    public static final RegistryObject<Block> PICKET_FENCE_YELLOW = register("yellow_picket_fence", () -> new UpgradedFenceBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_YELLOW)));
    public static final RegistryObject<Block> PICKET_FENCE_LIME = register("lime_picket_fence", () -> new UpgradedFenceBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_LIGHT_GREEN)));
    public static final RegistryObject<Block> PICKET_FENCE_PINK = register("pink_picket_fence", () -> new UpgradedFenceBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_PINK)));
    public static final RegistryObject<Block> PICKET_FENCE_GRAY = register("gray_picket_fence", () -> new UpgradedFenceBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_GRAY)));
    public static final RegistryObject<Block> PICKET_FENCE_LIGHT_GRAY = register("light_gray_picket_fence", () -> new UpgradedFenceBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_LIGHT_GRAY)));
    public static final RegistryObject<Block> PICKET_FENCE_CYAN = register("cyan_picket_fence", () -> new UpgradedFenceBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_CYAN)));
    public static final RegistryObject<Block> PICKET_FENCE_PURPLE = register("purple_picket_fence", () -> new UpgradedFenceBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_PURPLE)));
    public static final RegistryObject<Block> PICKET_FENCE_BLUE = register("blue_picket_fence", () -> new UpgradedFenceBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_BLUE)));
    public static final RegistryObject<Block> PICKET_FENCE_BROWN = register("brown_picket_fence", () -> new UpgradedFenceBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_BROWN)));
    public static final RegistryObject<Block> PICKET_FENCE_GREEN = register("green_picket_fence", () -> new UpgradedFenceBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_GREEN)));
    public static final RegistryObject<Block> PICKET_FENCE_RED = register("red_picket_fence", () -> new UpgradedFenceBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_RED)));
    public static final RegistryObject<Block> PICKET_FENCE_BLACK = register("black_picket_fence", () -> new UpgradedFenceBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_BLACK)));
    public static final RegistryObject<Block> PICKET_GATE_WHITE = register("white_picket_gate", () -> new UpgradedGateBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.SNOW)));
    public static final RegistryObject<Block> PICKET_GATE_ORANGE = register("orange_picket_gate", () -> new UpgradedGateBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_ORANGE)));
    public static final RegistryObject<Block> PICKET_GATE_MAGENTA = register("magenta_picket_gate", () -> new UpgradedGateBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_MAGENTA)));
    public static final RegistryObject<Block> PICKET_GATE_LIGHT_BLUE = register("light_blue_picket_gate", () -> new UpgradedGateBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_LIGHT_BLUE)));
    public static final RegistryObject<Block> PICKET_GATE_YELLOW = register("yellow_picket_gate", () -> new UpgradedGateBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_YELLOW)));
    public static final RegistryObject<Block> PICKET_GATE_LIME = register("lime_picket_gate", () -> new UpgradedGateBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_LIGHT_GREEN)));
    public static final RegistryObject<Block> PICKET_GATE_PINK = register("pink_picket_gate", () -> new UpgradedGateBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_PINK)));
    public static final RegistryObject<Block> PICKET_GATE_GRAY = register("gray_picket_gate", () -> new UpgradedGateBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_GRAY)));
    public static final RegistryObject<Block> PICKET_GATE_LIGHT_GRAY = register("light_gray_picket_gate", () -> new UpgradedGateBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_LIGHT_GRAY)));
    public static final RegistryObject<Block> PICKET_GATE_CYAN = register("cyan_picket_gate", () -> new UpgradedGateBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_CYAN)));
    public static final RegistryObject<Block> PICKET_GATE_PURPLE = register("purple_picket_gate", () -> new UpgradedGateBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_PURPLE)));
    public static final RegistryObject<Block> PICKET_GATE_BLUE = register("blue_picket_gate", () -> new UpgradedGateBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_BLUE)));
    public static final RegistryObject<Block> PICKET_GATE_BROWN = register("brown_picket_gate", () -> new UpgradedGateBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_BROWN)));
    public static final RegistryObject<Block> PICKET_GATE_GREEN = register("green_picket_gate", () -> new UpgradedGateBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_GREEN)));
    public static final RegistryObject<Block> PICKET_GATE_RED = register("red_picket_gate", () -> new UpgradedGateBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_RED)));
    public static final RegistryObject<Block> PICKET_GATE_BLACK = register("black_picket_gate", () -> new UpgradedGateBlock(Block.Properties.of().strength(2.0F, 3.0F).sound(SoundType.WOOD).forceSolidOn().instrument(NoteBlockInstrument.BASS).mapColor(MapColor.COLOR_BLACK)));
    public static final RegistryObject<Block> CRATE_OAK = register("oak_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> CRATE_SPRUCE = register("spruce_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> CRATE_BIRCH = register("birch_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> CRATE_JUNGLE = register("jungle_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> CRATE_ACACIA = register("acacia_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> CRATE_DARK_OAK = register("dark_oak_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> CRATE_CRIMSON = register("crimson_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> CRATE_WARPED = register("warped_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> CRATE_MANGROVE = register("mangrove_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> CRATE_CHERRY = register("cherry_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> CRATE_BAMBOO = register("bamboo_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> CRATE_STRIPPED_OAK = register("stripped_oak_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> CRATE_STRIPPED_SPRUCE = register("stripped_spruce_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> CRATE_STRIPPED_BIRCH = register("stripped_birch_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> CRATE_STRIPPED_JUNGLE = register("stripped_jungle_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> CRATE_STRIPPED_ACACIA = register("stripped_acacia_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> CRATE_STRIPPED_DARK_OAK = register("stripped_dark_oak_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> CRATE_STRIPPED_CRIMSON = register("stripped_crimson_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> CRATE_STRIPPED_WARPED = register("stripped_warped_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> CRATE_STRIPPED_MANGROVE = register("stripped_mangrove_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> CRATE_STRIPPED_CHERRY = register("stripped_cherry_crate", () -> new CrateBlock(Block.Properties.copy(Blocks.CHEST)));
    public static final RegistryObject<Block> PARK_BENCH_OAK = register("oak_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> PARK_BENCH_SPRUCE = register("spruce_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> PARK_BENCH_BIRCH = register("birch_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> PARK_BENCH_JUNGLE = register("jungle_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> PARK_BENCH_ACACIA = register("acacia_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> PARK_BENCH_DARK_OAK = register("dark_oak_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> PARK_BENCH_CRIMSON = register("crimson_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> PARK_BENCH_WARPED = register("warped_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> PARK_BENCH_MANGROVE = register("mangrove_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> PARK_BENCH_CHERRY = register("cherry_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> PARK_BENCH_BAMBOO = register("bamboo_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.BAMBOO_PLANKS)));
    public static final RegistryObject<Block> PARK_BENCH_STRIPPED_OAK = register("stripped_oak_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> PARK_BENCH_STRIPPED_SPRUCE = register("stripped_spruce_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> PARK_BENCH_STRIPPED_BIRCH = register("stripped_birch_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> PARK_BENCH_STRIPPED_JUNGLE = register("stripped_jungle_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> PARK_BENCH_STRIPPED_ACACIA = register("stripped_acacia_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> PARK_BENCH_STRIPPED_DARK_OAK = register("stripped_dark_oak_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> PARK_BENCH_STRIPPED_CRIMSON = register("stripped_crimson_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> PARK_BENCH_STRIPPED_WARPED = register("stripped_warped_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> PARK_BENCH_STRIPPED_MANGROVE = register("stripped_mangrove_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> PARK_BENCH_STRIPPED_CHERRY = register("stripped_cherry_park_bench", () -> new ParkBenchBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> POST_BOX = register("post_box", () -> new PostBoxBlock(Block.Properties.copy(Blocks.ANVIL)));
    public static final RegistryObject<Block> MAIL_BOX_OAK = register("oak_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> MAIL_BOX_SPRUCE = register("spruce_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> MAIL_BOX_BIRCH = register("birch_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> MAIL_BOX_JUNGLE = register("jungle_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> MAIL_BOX_ACACIA = register("acacia_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> MAIL_BOX_DARK_OAK = register("dark_oak_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> MAIL_BOX_CRIMSON = register("crimson_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> MAIL_BOX_WARPED = register("warped_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> MAIL_BOX_MANGROVE = register("mangrove_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> MAIL_BOX_CHERRY = register("cherry_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> MAIL_BOX_BAMBOO = register("bamboo_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.BAMBOO_PLANKS)));
    public static final RegistryObject<Block> MAIL_BOX_STRIPPED_OAK = register("stripped_oak_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> MAIL_BOX_STRIPPED_SPRUCE = register("stripped_spruce_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> MAIL_BOX_STRIPPED_BIRCH = register("stripped_birch_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> MAIL_BOX_STRIPPED_JUNGLE = register("stripped_jungle_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> MAIL_BOX_STRIPPED_ACACIA = register("stripped_acacia_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> MAIL_BOX_STRIPPED_DARK_OAK = register("stripped_dark_oak_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> MAIL_BOX_STRIPPED_CRIMSON = register("stripped_crimson_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> MAIL_BOX_STRIPPED_WARPED = register("stripped_warped_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> MAIL_BOX_STRIPPED_MANGROVE = register("stripped_mangrove_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> MAIL_BOX_STRIPPED_CHERRY = register("stripped_cherry_mail_box", () -> new MailBoxBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> HEDGE_OAK = register("oak_hedge", () -> new HedgeBlock(Block.Properties.copy(Blocks.OAK_LEAVES)));
    public static final RegistryObject<Block> HEDGE_SPRUCE = register("spruce_hedge", () -> new HedgeBlock(Block.Properties.copy(Blocks.SPRUCE_LEAVES)));
    public static final RegistryObject<Block> HEDGE_BIRCH = register("birch_hedge", () -> new HedgeBlock(Block.Properties.copy(Blocks.BIRCH_LEAVES)));
    public static final RegistryObject<Block> HEDGE_JUNGLE = register("jungle_hedge", () -> new HedgeBlock(Block.Properties.copy(Blocks.JUNGLE_LEAVES)));
    public static final RegistryObject<Block> HEDGE_ACACIA = register("acacia_hedge", () -> new HedgeBlock(Block.Properties.copy(Blocks.ACACIA_LEAVES)));
    public static final RegistryObject<Block> HEDGE_DARK_OAK = register("dark_oak_hedge", () -> new HedgeBlock(Block.Properties.copy(Blocks.DARK_OAK_LEAVES)));
    public static final RegistryObject<Block> HEDGE_MANGROVE = register("mangrove_hedge", () -> new HedgeBlock(Block.Properties.copy(Blocks.MANGROVE_LEAVES)));
    public static final RegistryObject<Block> HEDGE_CHERRY = register("cherry_hedge", () -> new HedgeBlock(Block.Properties.copy(Blocks.CHERRY_LEAVES)));
    public static final RegistryObject<Block> HEDGE_AZALEA = register("azalea_hedge", () -> new HedgeBlock(Block.Properties.copy(Blocks.AZALEA_LEAVES)));
    public static final RegistryObject<Block> HEDGE_FLOWERING_AZALEA = register("flowering_azalea_hedge", () -> new HedgeBlock(Block.Properties.copy(Blocks.FLOWERING_AZALEA_LEAVES)));
    public static final RegistryObject<Block> ROCK_PATH = register("rock_path", () -> new RockPath(Block.Properties.copy(Blocks.STONE)));
    public static final RegistryObject<Block> TRAMPOLINE = register("trampoline", () -> new TrampolineBlock(Block.Properties.copy(Blocks.STONE)), block -> new TrampolineItem(block.get(), new Item.Properties()));
    public static final RegistryObject<Block> COOLER_WHITE = register("white_cooler", () -> new CoolerBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> COOLER_ORANGE = register("orange_cooler", () -> new CoolerBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> COOLER_MAGENTA = register("magenta_cooler", () -> new CoolerBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> COOLER_LIGHT_BLUE = register("light_blue_cooler", () -> new CoolerBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> COOLER_YELLOW = register("yellow_cooler", () -> new CoolerBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> COOLER_LIME = register("lime_cooler", () -> new CoolerBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> COOLER_PINK = register("pink_cooler", () -> new CoolerBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> COOLER_GRAY = register("gray_cooler", () -> new CoolerBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> COOLER_LIGHT_GRAY = register("light_gray_cooler", () -> new CoolerBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> COOLER_CYAN = register("cyan_cooler", () -> new CoolerBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> COOLER_PURPLE = register("purple_cooler", () -> new CoolerBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> COOLER_BLUE = register("blue_cooler", () -> new CoolerBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> COOLER_BROWN = register("brown_cooler", () -> new CoolerBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> COOLER_GREEN = register("green_cooler", () -> new CoolerBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> COOLER_RED = register("red_cooler", () -> new CoolerBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> COOLER_BLACK = register("black_cooler", () -> new CoolerBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> GRILL_WHITE = register("white_grill", () -> new GrillBlock(Block.Properties.copy(Blocks.WHITE_CONCRETE)));
    public static final RegistryObject<Block> GRILL_ORANGE = register("orange_grill", () -> new GrillBlock(Block.Properties.copy(Blocks.ORANGE_CONCRETE)));
    public static final RegistryObject<Block> GRILL_MAGENTA = register("magenta_grill", () -> new GrillBlock(Block.Properties.copy(Blocks.MAGENTA_CONCRETE)));
    public static final RegistryObject<Block> GRILL_LIGHT_BLUE = register("light_blue_grill", () -> new GrillBlock(Block.Properties.copy(Blocks.LIGHT_BLUE_CONCRETE)));
    public static final RegistryObject<Block> GRILL_YELLOW = register("yellow_grill", () -> new GrillBlock(Block.Properties.copy(Blocks.YELLOW_CONCRETE)));
    public static final RegistryObject<Block> GRILL_LIME = register("lime_grill", () -> new GrillBlock(Block.Properties.copy(Blocks.LIME_CONCRETE)));
    public static final RegistryObject<Block> GRILL_PINK = register("pink_grill", () -> new GrillBlock(Block.Properties.copy(Blocks.PINK_CONCRETE)));
    public static final RegistryObject<Block> GRILL_GRAY = register("gray_grill", () -> new GrillBlock(Block.Properties.copy(Blocks.GRAY_CONCRETE)));
    public static final RegistryObject<Block> GRILL_LIGHT_GRAY = register("light_gray_grill", () -> new GrillBlock(Block.Properties.copy(Blocks.LIGHT_GRAY_CONCRETE)));
    public static final RegistryObject<Block> GRILL_CYAN = register("cyan_grill", () -> new GrillBlock(Block.Properties.copy(Blocks.CYAN_CONCRETE)));
    public static final RegistryObject<Block> GRILL_PURPLE = register("purple_grill", () -> new GrillBlock(Block.Properties.copy(Blocks.PURPLE_CONCRETE)));
    public static final RegistryObject<Block> GRILL_BLUE = register("blue_grill", () -> new GrillBlock(Block.Properties.copy(Blocks.BLUE_CONCRETE)));
    public static final RegistryObject<Block> GRILL_BROWN = register("brown_grill", () -> new GrillBlock(Block.Properties.copy(Blocks.BROWN_CONCRETE)));
    public static final RegistryObject<Block> GRILL_GREEN = register("green_grill", () -> new GrillBlock(Block.Properties.copy(Blocks.GREEN_CONCRETE)));
    public static final RegistryObject<Block> GRILL_RED = register("red_grill", () -> new GrillBlock(Block.Properties.copy(Blocks.RED_CONCRETE)));
    public static final RegistryObject<Block> GRILL_BLACK = register("black_grill", () -> new GrillBlock(Block.Properties.copy(Blocks.BLACK_CONCRETE)));
    public static final RegistryObject<Block> DOOR_MAT = register("door_mat", () -> new DoorMatBlock(Block.Properties.copy(Blocks.HAY_BLOCK)), block -> new DoorMatItem(block.get(), new Item.Properties())); //TODO why did i need this?
    public static final RegistryObject<Block> DIVING_BOARD = register("diving_board", () -> new DivingBoardBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_OAK = register("oak_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_SPRUCE = register("spruce_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_BIRCH = register("birch_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_JUNGLE = register("jungle_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_ACACIA = register("acacia_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_DARK_OAK = register("dark_oak_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_CRIMSON = register("crimson_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_WARPED = register("warped_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_MANGROVE = register("mangrove_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_CHERRY = register("cherry_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_BAMBOO = register("bamboo_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.BAMBOO_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_STRIPPED_OAK = register("stripped_oak_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_STRIPPED_SPRUCE = register("stripped_spruce_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_STRIPPED_BIRCH = register("stripped_birch_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_STRIPPED_JUNGLE = register("stripped_jungle_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_STRIPPED_ACACIA = register("stripped_acacia_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_STRIPPED_DARK_OAK = register("stripped_dark_oak_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_STRIPPED_CRIMSON = register("stripped_crimson_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_STRIPPED_WARPED = register("stripped_warped_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_STRIPPED_MANGROVE = register("stripped_mangrove_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_STRIPPED_CHERRY = register("stripped_cherry_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_WHITE = register("white_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.WHITE_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_ORANGE = register("orange_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.ORANGE_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_MAGENTA = register("magenta_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.MAGENTA_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_LIGHT_BLUE = register("light_blue_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.LIGHT_BLUE_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_YELLOW = register("yellow_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.YELLOW_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_LIME = register("lime_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.LIME_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_PINK = register("pink_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.PINK_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_GRAY = register("gray_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.GRAY_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_LIGHT_GRAY = register("light_gray_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.LIGHT_GRAY_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_CYAN = register("cyan_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.CYAN_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_PURPLE = register("purple_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.PURPLE_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_BLUE = register("blue_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.BLUE_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_BROWN = register("brown_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.BROWN_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_GREEN = register("green_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.GREEN_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_RED = register("red_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.RED_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_COUNTER_BLACK = register("black_kitchen_counter", () -> new KitchenCounterBlock(Block.Properties.copy(Blocks.BLACK_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_OAK = register("oak_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_SPRUCE = register("spruce_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_BIRCH = register("birch_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_JUNGLE = register("jungle_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_ACACIA = register("acacia_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_DARK_OAK = register("dark_oak_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_CRIMSON = register("crimson_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_WARPED = register("warped_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_MANGROVE = register("mangrove_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_CHERRY = register("cherry_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_BAMBOO = register("bamboo_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.BAMBOO_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_STRIPPED_OAK = register("stripped_oak_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_STRIPPED_SPRUCE = register("stripped_spruce_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_STRIPPED_BIRCH = register("stripped_birch_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_STRIPPED_JUNGLE = register("stripped_jungle_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_STRIPPED_ACACIA = register("stripped_acacia_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_STRIPPED_DARK_OAK = register("stripped_dark_oak_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_STRIPPED_CRIMSON = register("stripped_crimson_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_STRIPPED_WARPED = register("stripped_warped_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_STRIPPED_MANGROVE = register("stripped_mangrove_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_STRIPPED_CHERRY = register("stripped_cherry_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_WHITE = register("white_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.WHITE_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_ORANGE = register("orange_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.ORANGE_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_MAGENTA = register("magenta_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.MAGENTA_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_LIGHT_BLUE = register("light_blue_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.LIGHT_BLUE_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_YELLOW = register("yellow_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.YELLOW_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_LIME = register("lime_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.LIME_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_PINK = register("pink_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.PINK_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_GRAY = register("gray_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.GRAY_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_LIGHT_GRAY = register("light_gray_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.LIGHT_GRAY_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_CYAN = register("cyan_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.CYAN_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_PURPLE = register("purple_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.PURPLE_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_BLUE = register("blue_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.BLUE_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_BROWN = register("brown_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.BROWN_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_GREEN = register("green_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.GREEN_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_RED = register("red_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.RED_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_DRAWER_BLACK = register("black_kitchen_drawer", () -> new KitchenDrawerBlock(Block.Properties.copy(Blocks.BLACK_TERRACOTTA)));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_OAK = register("oak_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.OAK_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_SPRUCE = register("spruce_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_BIRCH = register("birch_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_JUNGLE = register("jungle_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_ACACIA = register("acacia_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_DARK_OAK = register("dark_oak_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_CRIMSON = register("crimson_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_WARPED = register("warped_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.WARPED_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_MANGROVE = register("mangrove_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_CHERRY = register("cherry_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_BAMBOO = register("bamboo_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.BAMBOO_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_STRIPPED_OAK = register("stripped_oak_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.OAK_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_STRIPPED_SPRUCE = register("stripped_spruce_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_STRIPPED_BIRCH = register("stripped_birch_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_STRIPPED_JUNGLE = register("stripped_jungle_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_STRIPPED_ACACIA = register("stripped_acacia_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_STRIPPED_DARK_OAK = register("stripped_dark_oak_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_STRIPPED_CRIMSON = register("stripped_crimson_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_STRIPPED_WARPED = register("stripped_warped_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.WARPED_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_STRIPPED_MANGROVE = register("stripped_mangrove_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_STRIPPED_CHERRY = register("stripped_cherry_kitchen_sink_light", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_OAK = register("oak_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.OAK_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_SPRUCE = register("spruce_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_BIRCH = register("birch_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_JUNGLE = register("jungle_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_ACACIA = register("acacia_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_DARK_OAK = register("dark_oak_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_CRIMSON = register("crimson_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_WARPED = register("warped_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.WARPED_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_MANGROVE = register("mangrove_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_CHERRY = register("cherry_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_BAMBOO = register("bamboo_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.BAMBOO_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_STRIPPED_OAK = register("stripped_oak_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.OAK_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_STRIPPED_SPRUCE = register("stripped_spruce_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.SPRUCE_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_STRIPPED_BIRCH = register("stripped_birch_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.BIRCH_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_STRIPPED_JUNGLE = register("stripped_jungle_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.JUNGLE_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_STRIPPED_ACACIA = register("stripped_acacia_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.ACACIA_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_STRIPPED_DARK_OAK = register("stripped_dark_oak_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.DARK_OAK_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_STRIPPED_CRIMSON = register("stripped_crimson_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.CRIMSON_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_STRIPPED_WARPED = register("stripped_warped_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.WARPED_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_STRIPPED_MANGROVE = register("stripped_mangrove_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.MANGROVE_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_DARK_STRIPPED_CHERRY = register("stripped_cherry_kitchen_sink_dark", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.CHERRY_PLANKS), true));
    public static final RegistryObject<Block> KITCHEN_SINK_WHITE = register("white_kitchen_sink", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.WHITE_TERRACOTTA), false));
    public static final RegistryObject<Block> KITCHEN_SINK_ORANGE = register("orange_kitchen_sink", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.ORANGE_TERRACOTTA), false));
    public static final RegistryObject<Block> KITCHEN_SINK_MAGENTA = register("magenta_kitchen_sink", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.MAGENTA_TERRACOTTA), false));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_BLUE = register("light_blue_kitchen_sink", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.LIGHT_BLUE_TERRACOTTA), false));
    public static final RegistryObject<Block> KITCHEN_SINK_YELLOW = register("yellow_kitchen_sink", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.YELLOW_TERRACOTTA), false));
    public static final RegistryObject<Block> KITCHEN_SINK_LIME = register("lime_kitchen_sink", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.LIME_TERRACOTTA), false));
    public static final RegistryObject<Block> KITCHEN_SINK_PINK = register("pink_kitchen_sink", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.PINK_TERRACOTTA), false));
    public static final RegistryObject<Block> KITCHEN_SINK_GRAY = register("gray_kitchen_sink", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.GRAY_TERRACOTTA), false));
    public static final RegistryObject<Block> KITCHEN_SINK_LIGHT_GRAY = register("light_gray_kitchen_sink", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.LIGHT_GRAY_TERRACOTTA), false));
    public static final RegistryObject<Block> KITCHEN_SINK_CYAN = register("cyan_kitchen_sink", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.CYAN_TERRACOTTA), false));
    public static final RegistryObject<Block> KITCHEN_SINK_PURPLE = register("purple_kitchen_sink", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.PURPLE_TERRACOTTA), false));
    public static final RegistryObject<Block> KITCHEN_SINK_BLUE = register("blue_kitchen_sink", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.BLUE_TERRACOTTA), false));
    public static final RegistryObject<Block> KITCHEN_SINK_BROWN = register("brown_kitchen_sink", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.BROWN_TERRACOTTA), false));
    public static final RegistryObject<Block> KITCHEN_SINK_GREEN = register("green_kitchen_sink", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.GREEN_TERRACOTTA), false));
    public static final RegistryObject<Block> KITCHEN_SINK_RED = register("red_kitchen_sink", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.RED_TERRACOTTA), false));
    public static final RegistryObject<Block> KITCHEN_SINK_BLACK = register("black_kitchen_sink", () -> new KitchenSinkBlock(Block.Properties.copy(Blocks.BLACK_TERRACOTTA), false));
    public static final RegistryObject<Block> FREEZER_LIGHT = registerNoItem("freezer_light", () -> new FreezerBlock(Block.Properties.copy(Blocks.IRON_BLOCK).noOcclusion(), () -> ModBlocks.FRIDGE_LIGHT));
    public static final RegistryObject<Block> FRIDGE_LIGHT = register("fridge_light", () -> new FridgeBlock(Block.Properties.copy(Blocks.IRON_BLOCK).noOcclusion(), () -> ModBlocks.FREEZER_LIGHT), block -> new BlockSupplierItem(new Item.Properties(), block.get(), ModBlocks.FREEZER_LIGHT));
    public static final RegistryObject<Block> FREEZER_DARK = registerNoItem("freezer_dark", () -> new FreezerBlock(Block.Properties.copy(Blocks.IRON_BLOCK).noOcclusion(), () -> ModBlocks.FRIDGE_DARK));
    public static final RegistryObject<Block> FRIDGE_DARK = register("fridge_dark", () -> new FridgeBlock(Block.Properties.copy(Blocks.IRON_BLOCK).noOcclusion(), () -> ModBlocks.FREEZER_DARK), block -> new BlockSupplierItem(new Item.Properties(), block.get(), ModBlocks.FREEZER_DARK));

    private static RegistryObject<Block> register(String name, Supplier<Block> block)
    {
        return register(name, block, new Item.Properties());
    }

    private static RegistryObject<Block> register(String name, Supplier<Block> block, Item.Properties properties)
    {
        RegistryObject<Block> registryObject = REGISTER.register(name, block);
        ModItems.REGISTER.register(name, () -> new BlockItem(registryObject.get(), properties));
        return registryObject;
    }

    private static RegistryObject<Block> register(String name, Supplier<Block> block, @Nullable Function<RegistryObject<Block>, BlockItem> function)
    {
        RegistryObject<Block> registryObject = REGISTER.register(name, block);
        if(function != null)
        {
            ModItems.REGISTER.register(name, () -> function.apply(registryObject));
        }
        return registryObject;
    }

    private static RegistryObject<Block> registerNoItem(String name, Supplier<Block> block)
    {
        return REGISTER.register(name, block);
    }
}
